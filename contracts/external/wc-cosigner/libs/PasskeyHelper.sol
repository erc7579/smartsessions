// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

import { WebAuthn } from "webauthn-sol/WebAuthn.sol";

/// @notice Holds the public key components for WebAuthn validation.
struct WebAuthnValidatorData {
    /// @dev The x-coordinate of the public key.
    uint256 pubKeyX;
    /// @dev The y-coordinate of the public key.
    uint256 pubKeyY;
}

/// @notice Helper library for Passkey (WebAuthn) signature verification.
/// @dev Provides utility functions to verify signatures generated by passkeys.
library PasskeyHelper {
    /**
     * @notice Verify a signature generated by a passkey.
     *
     * @dev Decodes the signature blob and then verifies it against the provided hash and public key
     *      using the WebAuthn library. The hash is used as the challenge value and user verification
     *      is required by default.
     *
     * @param webAuthnData The WebAuthn validator data containing the public key coordinates:
     *        - pubKeyX: The x-coordinate of the public key
     *        - pubKeyY: The y-coordinate of the public key
     * @param hash The hash of the message that was signed, used as the challenge value.
     * @param signature The encoded WebAuthn.WebAuthnAuth struct containing:
     *        - authenticatorData: Raw authenticator data including flags
     *        - clientDataJSON: JSON string with type, challenge, origin
     *        - challengeIndex: Index of challenge in clientDataJSON
     *        - typeIndex: Index of type in clientDataJSON
     *        - r: ECDSA signature r value
     *        - s: ECDSA signature s value
     *
     * @return True if the signature is valid and user verification flag is set, false otherwise.
     */
    function verifyPasskey(
        WebAuthnValidatorData memory webAuthnData,
        bytes32 hash,
        bytes memory signature
    )
        internal
        view
        returns (bool)
    {
        // Decode the signature blob directly into WebAuthn.WebAuthnAuth struct
        WebAuthn.WebAuthnAuth memory authStruct = abi.decode(signature, (WebAuthn.WebAuthnAuth));

        // The `hash` parameter (userOpHash) is the challenge.
        // WebAuthn.verify expects `bytes memory challenge`.
        bytes memory challengeBytes = abi.encode(hash);

        // Require User Verification (UV) by default for passkey signatures.
        // The WebAuthn.verify function will check the UV flag in authStruct.authenticatorData.
        bool requireUV = true;

        // Call the updated WebAuthn.verify function
        return WebAuthn.verify(challengeBytes, requireUV, authStruct, webAuthnData.pubKeyX, webAuthnData.pubKeyY);
    }
}
